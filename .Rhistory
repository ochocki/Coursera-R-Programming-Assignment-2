above <- function(x, n) {
use <- x > n
x[use]
}
x <- 1:20
above(x)
above(x, 12)
above <- function(x, n = 10) {
use <- x > n
x[use]
}
above(x)
?numeric
columnmean <- function(y) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[, i])
}
means
}
columnmean(airquality)
airquality
columnmean <- function(y, removeNA = TRUE) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[, i], na.rm = removeNA)
}
means
}
columnmean(airquality)
search()
make.power <- function(n) {
pow <- function(x) {
x^n
}
pow
}
make.power(3)
x <- 3
make.power(3)
n <- 3
make.power(3)
cube <- make.power(3)
cube(2)
x <- 3
make.power <- function(n) {
pow <- function(x) {
x^n
}
pow
}
make.power(3)
make.power <- function(n) {
x <- 3
pow <- function(x) {
x^n
}
pow
}
make.power(3)
cube <- function(x, n) {
x^3
}
cube(3)
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
x <- 1
if(x > 5) {
x <- 0
}
x <- 10
if(x > 5) {
x <- 0
}
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
z <- 5
f(3)
z <- 1023432
f(3)
f <- function(x) {
g <- function(y) {
y + z
}
z <- 5
x + g(x)
}
f(3)
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
f(30)
f(3)
f(1)
}
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
environment()
weekdays()
?weekdays
Sys.time()
Sys.timezone()
x <- sys.time()
x <- Sys.time()
x
p <- as.POSIXlt(x)
names(unclass(p))
p$sec
p$gmtoff
p$isdst
date <- c("January 22, 1984 9:30")
date
x <- strptime(date, "%B %d, %Y, %H:%M")
x
class(x)
?strptime
x <- as.Date("2012-03-01")
y <- as.Date("2012-02-28")
x-y
library(swirl)
swirl()
q()
library(swirl)
swirl()
bye()
x <- list(a = 1:5, b = rnorm(10))
x
?lapply
lapply(x, mean)
x
x <- list(a = matrix(1:4, 2, 2), b = matrix(1:6, 3, 2))
x
lapply(x, function(rando) rando[ ,1])
x <- matrix(rnorm(200), 20, 10)
x
apply(x, 2, mean)
?apply
?mapply
?tapply
?split
library(datasets)
head(airquality)
s <- split(airquality, airquality$Month)
s
lapply(s, function(x) colMeans(x[ , c("Ozone", "Solar.R", "Wind")]))
sapply(s, function(x) colMeans(x[ , c("Ozone", "Solar.R", "Wind")]))
sapply(s, function(x) colMeans(x[ , c("Ozone", "Solar.R", "Wind")], na.rm = TRUE))
?gl
?interaction
log(-1)
?debug
mean(x)
traceback()
library(datasets)
data("iris")
?iris
mean(iris$Sepal.Length)
head(iris)
?split
species <- split(iris, iris$Species)
species
mean(species$virginica)
?sapply
sapply(species, mean)
?colMeans
species$virginica
df <- data.frame(species$virginica)
df
mean(df$Sepal.Length)
?apply
apply(iris[, 1:4], 2, mean)
apply(iris, 1, mean)
library(datasets)
data("mtcars")
?mtcars
head(mtcars)
?tapply
tapply(mtcars$cyl, mtcars$mpg, mean)
with(mtcars, tapply(mpg, cyl, mean))
?with
with(mtcars, tapply(mpg, hp, mean))
with(mtcars, tapply(cyl, hp, mean))
with(mtcars, tapply(hp, cyl, mean))
cyl_hp <- with(mtcars, tapply(hp, cyl, mean))
class(cyl_hp)
cyl_hp
cyl_hp$4
df <- data.frame(cyl_hp)
df
df[8, ] - df[4, ]
df[8, ]
class(sf)
class(df)
df[1, ]
df[1, ] - df[3, ]
?ls
debug(ls)
ls
ls(df_
ls(df)
library(swirl)
swirl()
head(flags)
dim(flags)
viewinfo(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[ , 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[ , 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
setwd("~/Desktop/R_Assign_2/ProgrammingAssignment2-master")
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL
set <- function(y) {
x <<- y
inverse <<- NULL
}
get <- function() x
setinverse <- function(matrix_inv) inverse <<- matrix_inv
getinverse <- function() inverse
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inverse <- x$getinverse()
if(!is.null(inverse)) {
message("getting cached data")
return(inverse)
}
data <- x$get()
inverse <- solve(data, ...)
x$setinverse(inverse)
inverse
}
test_mat <- rnorm(100)
mat <- matrix(test_mat, nrow=10, ncol=10)
mat
makeCacheMatrix(mat)
cacheSolve(mat)
mat <- matrix(1:4, 2, 2)
mat
makeCacheMatrix(mat)
cacheSolve(mat)
a <- makeCacheMatrix( matrix(c(1,2,12,13), nrow = 2, ncol = 2) )
summary(a)
a$getMatrix()
a
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL
set <- function(y) {
x <<- y
inverse <<- NULL
}
get <- function() x
setinverse <- function(solve) inverse <<- solve
getinverse <- function() inverse
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inverse <- x$getinverse()
if(!is.null(inverse)) {
message("getting cached data")
return(inverse)
}
data <- x$get()
inverse <- solve(data, ...)
x$setinverse(inverse)
inverse
}
a <- makeCacheMatrix( matrix(c(1,2,12,13), nrow = 2, ncol = 2) )
a$getMatrix()
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inver <- NULL
set <- function(y) {
x <<- y
inver <<- NULL
}
get <- function() x
setinverse <- function(inverse) inver <<- inverse
getinverse <- function() inver
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inver <- x$getinverse()
if(!is.null(inver)) {
message("getting cached data, please wait")
return(inver)
}
data <- x$get()
inver <- solve(data, ...)
x$setinverse(inver)
inver
}
a <- makeCacheMatrix( matrix(c(1,2,12,13), nrow = 2, ncol = 2) )
a$getMatrix()
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inver <- NULL
set <- function(y) {
x <<- y
inver <<- NULL
}
get <- function() x
setinverse <- function(inverse) inver <<- inverse
getinverse <- function() inver
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inver <- x$getinverse()
if(!is.null(inver)) {
message("getting cached data, please wait")
return(inver)
}
data <- x$get()
inver <- solve(data)
x$setinverse(inver)
inver
}
a <- makeCacheMatrix( matrix(c(1,2,12,13), nrow = 2, ncol = 2) )
a$getMatrix()
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
m$get()
cacheSolve(m)
cacheSolve(m)
a <- makeCacheMatrix( matrix(c(1,2,12,13), nrow = 2, ncol = 2) )
a$get()
cacheSolve(a)
cacheSolve(a)
## This function will return the inverse of a matrix. It will first check to see if it has previously
## performed the operation. If so, it will return the cached value to save time, if not, it will
## perform the calculation and return the result.
##The first function, makeCacheMatrix creates a special "matrix", which is really a list containing a function to:
## set the value of the matrix
## get the value of the matrix
## set the value of the inverse matrix
## get the value of the inverse matrix
makeCacheMatrix <- function(x = matrix()) {
inver <- NULL
set <- function(y) {
x <<- y
inver <<- NULL
}
get <- function() x
setinverse <- function(inverse) inver <<- inverse
getinverse <- function() inver
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## cacheSolve will return the inverse of a matrix. First, it will check to see if this has already
## been calculated. If yes, then it will just display the cached value. If not, it will perform
## the computation.
cacheSolve <- function(x, ...) {
## Check to see if 'inver' has been previously calculated and cached
inver <- x$getinverse()
if(!is.null(inver)) {
message("getting cached data, please wait")
return(inver)
}
## If it wasn't previously calculated, it is done here using the solve() function
data <- x$get()
inver <- solve(data)
x$setinverse(inver)
inver
}
a <- makeCacheMatrix( matrix(c(1,2,12,13), nrow = 2, ncol = 2) )
a$get()
cacheSolve(a)
cacheSolve(a)
## This function will return the inverse of a matrix. It will first check to see if it has previously
## performed the operation. If so, it will return the cached value to save time, if not, it will
## perform the calculation and return the result.
##The first function, makeCacheMatrix creates a special "matrix", which is really a list containing a function to:
## set the value of the matrix
## get the value of the matrix
## set the value of the inverse matrix
## get the value of the inverse matrix
makeCacheMatrix <- function(x = matrix()) {
inver <- NULL
set <- function(y) {
x <<- y
inver <<- NULL
}
get <- function() x
setinverse <- function(inverse) inver <<- inverse
getinverse <- function() inver
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## cacheSolve will return the inverse of a matrix. First, it will check to see if this has already
## been calculated. If yes, then it will just display the cached value. If not, it will perform
## the computation.
cacheSolve <- function(x, ...) {
## Check to see if 'inver' has been previously calculated and cached
inver <- x$getinverse()
if(!is.null(inver)) {
message("Already done this. Getting cached data, please wait.")
return(inver)
}
## If it wasn't previously calculated, it is done here using the solve() function
data <- x$get()
inver <- solve(data)
x$setinverse(inver)
inver
}
a <- makeCacheMatrix( matrix(c(1,2,12,13), nrow = 2, ncol = 2) )
cacheSolve(a)
cacheSolve(a)
## This function will return the inverse of a matrix. It will first check to see if it has previously
## performed the operation. If so, it will return the cached value to save time, if not, it will
## perform the calculation and return the result.
##The first function, makeCacheMatrix creates a special "matrix", which is really a list containing a function to:
## set the value of the matrix
## get the value ofgit the matrix
## set the value of the inverse matrix
## get the value of the inverse matrix
makeCacheMatrix <- function(x = matrix()) {
inver <- NULL
set <- function(y) {
x <<- y
inver <<- NULL
}
get <- function() x
setinverse <- function(inverse) inver <<- inverse
getinverse <- function() inver
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## cacheSolve will return the inverse of a matrix. First, it will check to see if this has already
## been calculated. If yes, then it will just display the cached value. If not, it will perform
## the computation.
cacheSolve <- function(x, ...) {
## Check to see if 'inver' has been previously calculated and cached
inver <- x$getinverse()
if(!is.null(inver)) {
message("Already done this. Getting cached data, please wait.")
return(inver)
}
## If it wasn't previously calculated, it is done here using the solve() function
data <- x$get()
inver <- solve(data)
x$setinverse(inver)
inver
}
a <- makeCacheMatrix( matrix(c(1,2,12,13), nrow = 2, ncol = 2) )
cacheSolve(a)
cacheSolve(a)
git --version
